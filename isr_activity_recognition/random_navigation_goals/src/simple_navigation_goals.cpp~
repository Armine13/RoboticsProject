#include <ros/ros.h>
#include <move_base_msgs/MoveBaseAction.h>
#include <actionlib/client/simple_action_client.h>
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>

typedef actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> MoveBaseClient;

int main(int argc, char** argv){
  ros::init(argc, argv, "simple_navigation_goals");

  //tell the action client that we want to spin a thread by default
  MoveBaseClient ac("move_base", true);

  //wait for the action server to come up
  while(!ac.waitForServer(ros::Duration(5.0))){
    ROS_INFO("Waiting for the move_base action server to come up");
  }

  move_base_msgs::MoveBaseGoal goal;

  double min_x_=-2.0;
  double max_x_=2.0;
  double min_y_=-1.0;
  double max_y_=1.0;

  tf::TransformListener listener;

while (true){
	//we'll send a goal to the robot to move 1 meter forward
	  goal.target_pose.header.frame_id = "base_link";
	  goal.target_pose.header.stamp = ros::Time::now();

	  srand(time(NULL));

	  double x = (double(rand()) / double(RAND_MAX)) * (max_x_-min_x_) + min_x_;
	  double y = (double(rand()) / double(RAND_MAX)) * (max_y_-min_y_) + min_y_;
	  double yaw = (double(rand()) / double(RAND_MAX)) * 2*M_PI - M_PI;
	  yaw=0;
	  goal.target_pose.pose.position.x = x;
	  goal.target_pose.pose.position.y = y;
	  goal.target_pose.pose.orientation = tf::createQuaternionMsgFromYaw(yaw);

	  ROS_INFO("Sending a new goal to move_base x %lf y %lf yaw %lf", x, y, yaw);
      ac.sendGoal(goal);
	  
	  for (int i=0; i<10; i++){
	  

		tf::StampedTransform transform;
			 if (listener.frameExists("openni_depth_frame")==1){
			   //listener.lookupTransform("/torso_1", "/neck_1",  
				//						ros::Time(0), transform);
			   x=0; y=0; yaw=0;	
			   ROS_INFO("Skeleton found!");
			   
				goal.target_pose.pose.position.x = x;
				goal.target_pose.pose.position.y = y;
				goal.target_pose.pose.orientation = tf::createQuaternionMsgFromYaw(yaw);

				ROS_INFO("Sending a new goal to move_base x %lf y %lf yaw %lf", x, y, yaw);
				ac.sendGoal(goal);
			   // Classificacao aqui
			 }
			 //catch (tf::TransformException ex){
			   //ROS_ERROR("%s",ex.what());
			   //ros::Duration(1.0).sleep();
			
			 //}

		  //goal.target_pose.pose.position.x = x;
		  //goal.target_pose.pose.position.y = y;
		  //goal.target_pose.pose.orientation = tf::createQuaternionMsgFromYaw(yaw);

		  //ROS_INFO("Sending a new goal to move_base x %lf y %lf yaw %lf", x, y, yaw);

		  //ac.sendGoal(goal);

		  ac.waitForResult((ros::Duration(1.0)));	// espera s ate verificar se atingiu o goal ou nao
			 
		  if(ac.getState() == actionlib::SimpleClientGoalState::SUCCEEDED)
			ROS_INFO("Hooray, the base moved to goal");
		  //else
			//ROS_INFO("The base failed for some reason");
		
	  }
}
  return 0;
}
